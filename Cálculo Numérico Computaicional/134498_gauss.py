# -*- coding: utf-8 -*-
"""gauss.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TzA8I-G4Xe0HsPOlJcWLz3iIMypPqO_T

#Método da Eliminação de Gauss

Autor: Matheus Teixeira de Souza


**Definição:  
O método da eliminação de Gauss é uma técnica algébrica utilizada para resolver sistemas de equações lineares. Ele transforma a matriz do sistema em uma forma escalonada por meio de operações elementares de linha, facilitando a resolução do sistema através da substituição regressiva.**

**Objetivo:
O objetivo do método da eliminação de Gauss é simplificar um sistema de equações lineares até um ponto onde ele possa ser facilmente resolvido. Especificamente, ele visa transformar a matriz de coeficientes do sistema (junto com o vetor dos termos independentes) em uma matriz triangular superior. A partir dessa forma, a solução do sistema pode ser encontrada diretamente por substituição regressiva.**
"""

#Importando as bibliotecas necessárias
import numpy as np
import math

#Definindo o método
def eliminacao_de_gauss(A,b):
    n, _ = np.shape(A)                                  #Pega o número de linhas da matriz A inicial
    matriz_aumentada = np.concatenate((A,b),1)          #Coloca a matriz b ao lado da matriz a
    k = 0                                               #Define k=0
    #Faz o loop para percorrer os pivôs
    for k in range(n-1):
        pivo = matriz_aumentada[k,k]        #Calcula o pivô da iteração
        #Percorre as linhas abaixo do pivô
        for i in range(k+1,n):
            matriz_aumentada[i,k]   #numero abaixo do pivo
            fator = matriz_aumentada[i,k]/pivo
            matriz_aumentada[i,k] = matriz_aumentada[i,k] - (fator * pivo)
            #Percorre as colunas depois do pivo
            for j in range(k+1,n+1):
                #Faz o cálculo do novo a(n)
                matriz_aumentada[i,j] = matriz_aumentada[i,j] - (fator * matriz_aumentada[k,j])
    print(f"Matriz aumentada:\n{matriz_aumentada}\n")
    return matriz_aumentada

#Definindo a substituição regressiva
def substituicao_regressiva(matriz_aumentada):
    n, m = matriz_aumentada.shape  # Obtém o número de linhas e colunas da matriz aumentada
    x = np.zeros(n)  # Inicializa o vetor solução com zeros
    print(f"Valores de X :\n")
    # Itera sobre as linhas da matriz aumentada de baixo para cima (n-1 até 0)
    for i in range(n-1, -1, -1):
        # Começa assumindo que o valor de x[i] é igual ao termo independente da linha i
        x[i] = matriz_aumentada[i, -1]

        # Para cada coluna à direita da diagonal, subtrai o produto do coeficiente da matriz e o valor já encontrado de x[j]
        for j in range(i+1, n):
            x[i] = x[i] - matriz_aumentada[i, j] * x[j]

        # Divide pelo coeficiente diagonal para isolar x[i]  (isola)
        x[i] = x[i] / matriz_aumentada[i, i]

        #Printando os valores de x[i]
        print(f"X{i+1} = {x[i]}")

    # Retorna o vetor solução
    print(f"\nVetor solução:")
    return x

#Apenas declarando e chamando as funções
A = np.array([
    [1,4,52],
    [22,110,-3],
    [22,2,14]
])

b = np.array([
    [57],
    [129],
    [38]
])

#Chamando a função da eliminação de Gauss e atribuindo a normalização a matriz_aumentada
(matriz_aumentada) = eliminacao_de_gauss(A,b)
#Chamando a substituição regressiva desta matriz aumentada
solucao = substituicao_regressiva(matriz_aumentada)
print(solucao)   #Printando o vetor solução