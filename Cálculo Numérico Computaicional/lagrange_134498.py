# -*- coding: utf-8 -*-
"""Lagrange_134498.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14wd8VIXOZ4VksefYnP7LeeT9DYcZtaSt

#Autor : Matheus Teixeira de Souza
#Nome do método : Método de Lagrange
#Resumo: O método de Lagrange consiste em estimar valores intermediários entre um conjunto discreto de pontos conhecidos por meio de um polinômio. Pois em muitas situações é inviável calcular todos os valores, então fica melhor calcular em um intervalo e obter resultados satisfatórios.
#A aplicabilidade de tal método se estende a várias áreas, por exemplo, na computação gráfica renderizando curvas suaves, na modelagem matemática criando modelos com base em dados discretos e na engenharia ao gerar modelos para estimar o comportamento físico com base em dados experimentais.
"""

def lagrange_interpolation(x, y, z):
    """
    Implementa a Interpolação de Lagrange para estimar o valor da função em um ponto z.

    Parâmetros:
    x : Lista com as coordenadas x dos pontos conhecidos.
    y : Lista com as coordenadas y dos pontos conhecidos.
    z : O ponto onde queremos estimar o valor da função.

    O que é retornado?
    A Estimativa do valor da função no ponto z.
    """
    n = len(x) - 1  # Define n como o índice máximo dos elementos em x, equivalente ao grau do polinômio.
    soma = 0.0  # Inicializa a soma que acumulará o valor estimado da função no ponto z.

    # Loop para calcular o somatório da interpolação de Lagrange
    for i in range(n + 1):  # Itera sobre cada ponto conhecido (i varia de 0 até n)
        L = y[i]  # Inicia L como o valor de y correspondente ao ponto i.
        for j in range(n + 1):  # Itera sobre cada ponto conhecido novamente (j varia de 0 até n)
            if i != j:  # Garante que o cálculo de L ignore o ponto em si (i == j)
                L *= (z - x[j]) / (x[i] - x[j])  # Calcula o termo de Lagrange multiplicando os fatores
        soma += L  # Adiciona o valor calculado de L à soma total

    return soma  # Retorna a soma, que é a estimativa do valor da função em z

#Utilizando o exemplo dos slides para ln(2)

# Dados fornecidos
x = [1, 4, 6]  # Pontos x conhecidos onde a função foi avaliada
y = [0, 1.386294, 1.791759]  # Valores correspondentes de y (ln(x)) nos pontos conhecidos
z = 2  # Ponto onde queremos estimar ln(2)

# Interpolação de Primeiro Grau (linear)
resultado_linear = lagrange_interpolation(x[:2], y[:2], z)
print(f"Interpolação de Lagrange de 1º Grau: ln(2) ≈ {resultado_linear}")
# Calcula a interpolação linear usando os dois primeiros pontos e exibe o resultado

# Interpolação de Segundo Grau (quadrático)
resultado_quadratico = lagrange_interpolation(x, y, z)
print(f"Interpolação de Lagrange de 2º Grau: ln(2) ≈ {resultado_quadratico}")
# Calcula a interpolação quadrática usando todos os três pontos e exibe o resultado